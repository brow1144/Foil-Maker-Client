import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;

/**
 * Created by Nicholas on 10/24/2016.
 */
public class FoilMakerController implements ActionListener {
    protected FoilMakerView view;
    protected FoilMakerModel model;
    protected Socket socket;

    public void logIn(String username, String password) {
        sendRequest("LOGIN--" + username + "--" + password);
    }

    public void register(String username, String password) {
        sendRequest("CREATENEWUSER--" + username + "--" + password);
    }

    public void startANewGame(String userToken) {
        sendRequest("STARTNEWGAME--" + userToken);
    }

    public void joinGame(String userToken, String gameToken) {
        sendRequest("JOINGAME--" + userToken + "--" + gameToken);
    }

    public void launchGame(String userToken, String gameToken) {
        sendRequest("ALLPARTICIPANTSHAVEJOINED--" + userToken +
                "--" + gameToken);
    }

    public void sendSuggestion(String userToken, String gameToken, String suggestion) {
        sendRequest("PLAYERSUGGESTION--" + userToken + "--" +
                gameToken + "--" + suggestion);
    }

    public void sendChoice(String userToken, String gameToken, String choice) {
        sendRequest("PLAYERCHOICE--" + userToken + "--" +
                gameToken + "--" + choice);
    }

    public void logOut() {
        sendRequest("LOGOUT--");
    }

    public void sendRequest(String messageToServer) {
        try {
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

            out.println(messageToServer);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void listen() {
        try {
            InputStreamReader isr = new InputStreamReader(socket.getInputStream());
            BufferedReader in = new BufferedReader(isr);
            while (true) {
                String response = in.readLine();
                System.out.println(response);
                checkOutput(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        FoilMakerController controller = new FoilMakerController();
        controller.model = new FoilMakerModel();
        try {
            controller.socket = new Socket("localhost", 8000);
        } catch (IOException e) {
            e.printStackTrace();
        }
        controller.view = new FoilMakerView(controller);
        controller.listen();
    }

    public void checkOutput(String response) {
        if (response.contains("RESPONSE")) {
            if (response.contains("LOGIN")) {
                if (response.contains("SUCCESS")) {
                    view.goToNewGamePanel();
                    model.setUsername(view.usernameTextField.getText());
                    model.setUserToken(response.substring(26));
                } else if (response.contains("INVALIDMESSAGEFORMAT")) {
                    JOptionPane.showMessageDialog(null, "Error: Please Re-Enter",
                            "Error: Login", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("INVALIDUSERPASSWORD")) {
                    JOptionPane.showMessageDialog(null, "Error: Password not Recognized. Please Re-Enter",
                            "Error: Login", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("USERALREADYLOGGEDIN")) {
                    JOptionPane.showMessageDialog(null, "Error: User Already LoggedIn. Please Re-Enter",
                            "Error: Login", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("UNKNOWNUSER")) {
                    JOptionPane.showMessageDialog(null, "Error: Unknown User. Please Re-Enter",
                            "Error: Login", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("CREATENEWUSER")) {
                if (response.contains("SUCCESS")) {
                    JOptionPane.showMessageDialog(null, "New User Registered.",
                            "User Registration", JOptionPane.INFORMATION_MESSAGE);
                } else if (response.contains("INVALIDUSERNAME") || response.contains("INVALIDMESSAGEFORMAT")) {
                    JOptionPane.showMessageDialog(null, "Error: Must enter a username and password.",
                            "Error: Register", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("USERALREADYEXISTS")) {
                    JOptionPane.showMessageDialog(null, "Error: User Already Exists.",
                            "Error: Register", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("STARTNEWGAME")) {
                if (response.contains("SUCCESS")) {
                    view.goToStartNewGamePanel();
                    model.setGameToken(response.substring(33));
                    view.createdCode.replaceRange(model.getGameToken(), 0, 2);
                } else if (response.contains("USERNOTLOGGEDIN")) {
                    JOptionPane.showMessageDialog(null, "Error: User Not Logged In",
                            "Error: User Not Logged In", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("FAILURE")) {
                    JOptionPane.showMessageDialog(null, "Error: User already playing or server failed to create a " +
                                    "new game session due to an internal error.",
                            "Error: Failure", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("JOINGAME")) {
                //FIX FIX FIX FIX
                if (response.contains("SUCCESS")) {
                    view.usernameForController = model.getUsername();
                    //view.showMessage(model.getUsername());
                    //System.out.println(model.getUsername() + " joined");
                    view.goToWaitingForLeader();
                } else if (response.contains("USERNOTLOGGEDIN")) {
                    JOptionPane.showMessageDialog(null, "Error: User Not Logged In",
                            "Error: Invalid User Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("GAMEKEYNOTFOUND")) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid Game Token",
                            "Error: Invalid Game Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("FAILURE")) {
                    JOptionPane.showMessageDialog(null, "Error: User is Already In This Game",
                            "Error: User Already Joined", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("ALLPARTICIPANTSHAVEJOINED")) {
                if (response.contains("USERNOTLOGGEDIN")) {
                    JOptionPane.showMessageDialog(null, "Error: User Not Logged In",
                            "Error: Invalid User Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("INVALIDGAMETOKEN")) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid Game Token",
                            "Error: Invalid Game Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("USERNOTGAMELEADER")) {
                    JOptionPane.showMessageDialog(null, "Error: User already playing game",
                            "Error: User not Game Leader", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("PLAYERSUGGESTION")) {
                if (response.contains("USERNOTLOGGEDIN")) {
                    JOptionPane.showMessageDialog(null, "Error: User Not Logged In",
                            "Error: Invalid User Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("INVALIDGAMETOKEN")) {
                    JOptionPane.showMessageDialog(null, "Error: Invalid Game Token",
                            "Error: Invalid Game Token", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("UNEXPECTEDMESSAGETYPE")) {
                    JOptionPane.showMessageDialog(null, "Error: Server couldn't understand the request",
                            "Error: Unexpected Message Type", JOptionPane.ERROR_MESSAGE);
                } else if (response.contains("INVALIDMESSAGEFORMAT")) {
                    JOptionPane.showMessageDialog(null, "Error: Server couldn't understand the request",
                            "Error: Invalid Message Format", JOptionPane.ERROR_MESSAGE);
                }
            }

            if (response.contains("PLAYERCHOICE")) {
                if (response.contains("USERNOTLOGGEDIN"))
                    JOptionPane.showMessageDialog(null, "Error: User Not Logged In",
                            "Error: Invalid User Token", JOptionPane.ERROR_MESSAGE);
            } else if (response.contains("INVALIDGAMETOKEN")) {
                JOptionPane.showMessageDialog(null, "Error: Invalid Game Token",
                        "Error: Invalid Game Token", JOptionPane.ERROR_MESSAGE);
            } else if (response.contains("UNEXPECTEDMESSAGETYPE")) {
                JOptionPane.showMessageDialog(null, "Error: Server couldn't understand the request",
                        "Error: Unexpected Message Type", JOptionPane.ERROR_MESSAGE);
            } else if (response.contains("INVALIDMESSAGEFORMAT")) {
                JOptionPane.showMessageDialog(null, "Error: Server couldn't understand the request",
                        "Error: Invalid Message Format", JOptionPane.ERROR_MESSAGE);
            }
        } else {

            if (response.contains("NEWPARTICIPANT")) {
                String namePlusScore = response.substring(16);
                int firstDash = namePlusScore.indexOf('-');
                int x = firstDash + 16;
                response.substring(x);
                String y = response.substring(16, x);

                view.showMessage(y);
            }

            if (response.contains("NEWGAMEWORD")) {
                String question, answer;
                response = response.substring(13);
                question = response.substring(0, response.indexOf("--"));
                answer = response.substring(response.indexOf("--") + 2);
                model.setQuestion(question);
                model.setCorrectAnswer(answer);
                view.goToLaunchGame(question);
            }

            if(response.contains("ROUNDOPTIONS")){
                response = response.substring(14);
                while(response.contains("--")){
                    model.addChoices(response.substring(0,response.indexOf("--")));
                    response = response.substring(response.indexOf("--") + 2);
                }
                model.addChoices(response);
                view.goToOptionPanel();
            }
            if(response.contains("ROUNDRESULT")){
                response = response.substring(13);
                String firstName = response.substring(0,response.indexOf("--"));
                if (firstName.equals(model.getUsername())) {
                    response = response.substring(response.indexOf("--") + 2);
                    view.roundResultOutput.setText(response.substring(0,response.indexOf("--")));
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.setText(firstName + " => Score: " + response.substring(0,response.indexOf("--")));
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append(" | Fooled " + response.substring(0,response.indexOf("--")) + " player(s)");
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append(" | Fooled by " + response.substring(0,response.indexOf("--")) + " player(s)");
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append("\n" + response.substring(0,response.indexOf("--")));
                    response = response.substring(response.indexOf("--") + 2);
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append(" => Score: " + response.substring(0,response.indexOf("--")));
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append(" | Fooled " + response.substring(0,response.indexOf("--")) + " player(s)");
                    response = response.substring(response.indexOf("--") + 2);
                    view.overAllResultsOutput.append(" | Fooled by " + response + " player(s)");
                } else {

                }
                view.goToResultPanel();
            }
        }
    }

    public void handleButtonAction(ActionEvent e) {
        JButton button = (JButton) e.getSource();
        String buttonText = button.getText();

        //If Login Button Pushed
        if (buttonText.equals("Login")) {
            logIn(view.usernameTextField.getText(), view.passwordTextField.getText());
        }

        //If Register Button Pushed
        if (buttonText.equals("Register")) {
            register(view.usernameTextField.getText(), view.passwordTextField.getText());
        }

        //If Start New Game Button Pushed
        if (buttonText.equals("Start a New Game")) {
            startANewGame(model.getUserToken());
        }

        //If JoinGame Button is pushed
        if (buttonText.equals("Join a Game")) {
            view.goToJoinAGame();
        }

        if (buttonText.equals("Join Game")) {
            model.setGameToken(view.codeTextField.getText());
            joinGame(model.getUserToken(), view.codeTextField.getText());
        }

        //If Host Starts game
        if (buttonText.equals("Start Game")) {
            launchGame(model.getUserToken(), model.getGameToken());
        }

        //Submitting suggestion
        if(buttonText.equals("Submit Suggestion")){
            model.setSuggestion(view.userSuggestion.getText());
            sendSuggestion(model.getUserToken(),model.getGameToken(),model.getSuggestion());
        }

        if (buttonText.equals("Submit Option")) {
            sendChoice(model.getUserToken(), model.getGameToken(), model.getChoice());
        }
    }

    public void actionPerformed(ActionEvent e) {
        Object source = e.getSource();
        if (source instanceof JButton) {
            handleButtonAction(e);
        }

        if(source instanceof JRadioButton){
            model.setChoice(((JRadioButton)source).getText());
        }
    }
}
